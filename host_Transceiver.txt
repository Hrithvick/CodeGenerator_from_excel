void HOST_logIN::RECEIVE_GR_REQUEST(GR_REQUEST* ms)
{
BOOST_LOG_TRIVIAL(info) << "RECEIVE_GR_REQUESTL: " << __LINE__ << ":" << __FILE__ "\n";
BOOST_LOG_TRIVIAL(info) << ms->toJSON() << "L: " << __LINE__ << ":" << __FILE__ "\n";
delete  ms;
}
void HOST_logIN::SEND_GR_RESPONSE()
{
BOOST_LOG_TRIVIAL(info) << "SEND_GR_RESPONSEL: " << __LINE__ << ":" << __FILE__ "\n";
uint8_t data[sizeof(MS_UPDATE_LOCAL_DATABASE)] = {  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,00,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,7,6,7,8,6,4,8,0,5,};
GR_RESPONSE* ms = new GR_RESPONSE(data);
ms->Direct_Interface_Header.Length = sizeof(GR_RESPONSE);
ms->Message_Header.TransactionCode = NNF_Constants::TransactionCode::GR_RESPONSE;
ms->Message_Header.MessageLength = (sizeof(GR_RESPONSE) - sizeof(DIRECT_INTERFACE_HEADER));BOOST_LOG_TRIVIAL(info) << ms->toJSON() << " L: " << __LINE__ << ":" << __FILE__ << "\n";
ms->Flip_endian();
sig_SEND((uint8_t*)ms, sizeof(GR_RESPONSE));
}
void HOST_logIN::RECEIVE_BOX_SIGN_ON_REQUEST_IN(BOX_SIGN_ON_REQUEST_IN* ms)
{
BOOST_LOG_TRIVIAL(info) << "RECEIVE_BOX_SIGN_ON_REQUEST_INL: " << __LINE__ << ":" << __FILE__ "\n";
BOOST_LOG_TRIVIAL(info) << ms->toJSON() << "L: " << __LINE__ << ":" << __FILE__ "\n";
delete  ms;
}
void HOST_logIN::SEND_BOX_SIGN_ON_REQUEST_OUT()
{
BOOST_LOG_TRIVIAL(info) << "SEND_BOX_SIGN_ON_REQUEST_OUTL: " << __LINE__ << ":" << __FILE__ "\n";
uint8_t data[sizeof(MS_UPDATE_LOCAL_DATABASE)] = {  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,00,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,3,3,};
BOX_SIGN_ON_REQUEST_OUT* ms = new BOX_SIGN_ON_REQUEST_OUT(data);
ms->Direct_Interface_Header.Length = sizeof(BOX_SIGN_ON_REQUEST_OUT);
ms->Message_Header.TransactionCode = NNF_Constants::TransactionCode::BOX_SIGN_ON_REQUEST_OUT;
ms->Message_Header.MessageLength = (sizeof(BOX_SIGN_ON_REQUEST_OUT) - sizeof(DIRECT_INTERFACE_HEADER));BOOST_LOG_TRIVIAL(info) << ms->toJSON() << " L: " << __LINE__ << ":" << __FILE__ << "\n";
ms->Flip_endian();
sig_SEND((uint8_t*)ms, sizeof(BOX_SIGN_ON_REQUEST_OUT));
}
void HOST_logIN::SEND_MS_SIGNON()
{
BOOST_LOG_TRIVIAL(info) << "SEND_MS_SIGNONL: " << __LINE__ << ":" << __FILE__ "\n";
uint8_t data[sizeof(MS_UPDATE_LOCAL_DATABASE)] = {  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,00,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,4,3,4,5,3,3,2,2,2,2,5,7,4,3,5,5,5,5,1,1,1,1,6,5,8,9,9,0,0,0,0,1,0,0,0,1,2,3,1,1,4,4,1,2,3,4,5,};
MS_SIGNON* ms = new MS_SIGNON(data);
ms->Direct_Interface_Header.Length = sizeof(MS_SIGNON);
ms->Message_Header.TransactionCode = NNF_Constants::TransactionCode::SIGN_ON_REQUEST_IN;
ms->Message_Header.MessageLength = (sizeof(MS_SIGNON) - sizeof(DIRECT_INTERFACE_HEADER));BOOST_LOG_TRIVIAL(info) << ms->toJSON() << " L: " << __LINE__ << ":" << __FILE__ << "\n";
ms->Flip_endian();
sig_SEND((uint8_t*)ms, sizeof(MS_SIGNON));
}
void HOST_logIN::RECEIVE_MS_SIGNON(MS_SIGNON* ms)
{
BOOST_LOG_TRIVIAL(info) << "RECEIVE_MS_SIGNONL: " << __LINE__ << ":" << __FILE__ "\n";
BOOST_LOG_TRIVIAL(info) << ms->toJSON() << "L: " << __LINE__ << ":" << __FILE__ "\n";
delete  ms;
}
void HOST_logIN::SEND_MS_ERROR_RESPONSE()
{
BOOST_LOG_TRIVIAL(info) << "SEND_MS_ERROR_RESPONSEL: " << __LINE__ << ":" << __FILE__ "\n";
uint8_t data[sizeof(MS_UPDATE_LOCAL_DATABASE)] = {  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,00,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,};
MS_ERROR_RESPONSE* ms = new MS_ERROR_RESPONSE(data);
ms->Direct_Interface_Header.Length = sizeof(MS_ERROR_RESPONSE);
ms->Message_Header.TransactionCode = NNF_Constants::TransactionCode::SIGN_ON_REQUEST_OUT;
ms->Message_Header.MessageLength = (sizeof(MS_ERROR_RESPONSE) - sizeof(DIRECT_INTERFACE_HEADER));BOOST_LOG_TRIVIAL(info) << ms->toJSON() << " L: " << __LINE__ << ":" << __FILE__ << "\n";
ms->Flip_endian();
sig_SEND((uint8_t*)ms, sizeof(MS_ERROR_RESPONSE));
}
void HOST_logIN::RECEIVE_MS_SYSTEM_INFO_REQ(MS_SYSTEM_INFO_REQ* ms)
{
BOOST_LOG_TRIVIAL(info) << "RECEIVE_MS_SYSTEM_INFO_REQL: " << __LINE__ << ":" << __FILE__ "\n";
BOOST_LOG_TRIVIAL(info) << ms->toJSON() << "L: " << __LINE__ << ":" << __FILE__ "\n";
delete  ms;
}
void HOST_logIN::SEND_MS_SYSTEM_INFO_DATA()
{
BOOST_LOG_TRIVIAL(info) << "SEND_MS_SYSTEM_INFO_DATAL: " << __LINE__ << ":" << __FILE__ "\n";
uint8_t data[sizeof(MS_UPDATE_LOCAL_DATABASE)] = {  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,00,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,0,0,0,1,2,2,1,2,2,3,3,4,4,5,5,6,6,1,1,2,3,4,2,2,1,0,1,1,0,0,1,1,2,4,3,1,};
MS_SYSTEM_INFO_DATA* ms = new MS_SYSTEM_INFO_DATA(data);
ms->Direct_Interface_Header.Length = sizeof(MS_SYSTEM_INFO_DATA);
ms->Message_Header.TransactionCode = NNF_Constants::TransactionCode::SYSTEM_INFORMATION_OUT;
ms->Message_Header.MessageLength = (sizeof(MS_SYSTEM_INFO_DATA) - sizeof(DIRECT_INTERFACE_HEADER));BOOST_LOG_TRIVIAL(info) << ms->toJSON() << " L: " << __LINE__ << ":" << __FILE__ << "\n";
ms->Flip_endian();
sig_SEND((uint8_t*)ms, sizeof(MS_SYSTEM_INFO_DATA));
}
void HOST_logIN::SEND_MS_UPDATE_LOCAL_DATABASE()
{
BOOST_LOG_TRIVIAL(info) << "SEND_MS_UPDATE_LOCAL_DATABASEL: " << __LINE__ << ":" << __FILE__ "\n";
uint8_t data[sizeof(MS_UPDATE_LOCAL_DATABASE)] = {  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,00,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,2,1,1,2,1,2,1,1,4,3,1,1,1,1,5,3,};
MS_UPDATE_LOCAL_DATABASE* ms = new MS_UPDATE_LOCAL_DATABASE(data);
ms->Direct_Interface_Header.Length = sizeof(MS_UPDATE_LOCAL_DATABASE);
ms->Message_Header.TransactionCode = NNF_Constants::TransactionCode::UPDATE_LOCALDB_IN;
ms->Message_Header.MessageLength = (sizeof(MS_UPDATE_LOCAL_DATABASE) - sizeof(DIRECT_INTERFACE_HEADER));BOOST_LOG_TRIVIAL(info) << ms->toJSON() << " L: " << __LINE__ << ":" << __FILE__ << "\n";
ms->Flip_endian();
sig_SEND((uint8_t*)ms, sizeof(MS_UPDATE_LOCAL_DATABASE));
}
void HOST_logIN::RECEIVE_MS_UPDATE_LOCAL_DATABASE(MS_UPDATE_LOCAL_DATABASE* ms)
{
BOOST_LOG_TRIVIAL(info) << "RECEIVE_MS_UPDATE_LOCAL_DATABASEL: " << __LINE__ << ":" << __FILE__ "\n";
BOOST_LOG_TRIVIAL(info) << ms->toJSON() << "L: " << __LINE__ << ":" << __FILE__ "\n";
delete  ms;
}
void HOST_logIN::SEND_UPDATE_LDB_HEADER()
{
BOOST_LOG_TRIVIAL(info) << "SEND_UPDATE_LDB_HEADERL: " << __LINE__ << ":" << __FILE__ "\n";
uint8_t data[sizeof(MS_UPDATE_LOCAL_DATABASE)] = {  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,00,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,};
UPDATE_LDB_HEADER* ms = new UPDATE_LDB_HEADER(data);
ms->Direct_Interface_Header.Length = sizeof(UPDATE_LDB_HEADER);
ms->Message_Header.TransactionCode = NNF_Constants::TransactionCode::UPDATE_LOCALDB_HEADER;
ms->Message_Header.MessageLength = (sizeof(UPDATE_LDB_HEADER) - sizeof(DIRECT_INTERFACE_HEADER));BOOST_LOG_TRIVIAL(info) << ms->toJSON() << " L: " << __LINE__ << ":" << __FILE__ << "\n";
ms->Flip_endian();
sig_SEND((uint8_t*)ms, sizeof(UPDATE_LDB_HEADER));
}
void HOST_logIN::SEND_UPDATE_LDB_DATA()
{
BOOST_LOG_TRIVIAL(info) << "SEND_UPDATE_LDB_DATAL: " << __LINE__ << ":" << __FILE__ "\n";
uint8_t data[sizeof(MS_UPDATE_LOCAL_DATABASE)] = {  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,00,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,};
UPDATE_LDB_DATA* ms = new UPDATE_LDB_DATA(data);
ms->Direct_Interface_Header.Length = sizeof(UPDATE_LDB_DATA);
ms->Message_Header.TransactionCode = NNF_Constants::TransactionCode::UPDATE_LOCALDB_DATA;
ms->Message_Header.MessageLength = (sizeof(UPDATE_LDB_DATA) - sizeof(DIRECT_INTERFACE_HEADER));BOOST_LOG_TRIVIAL(info) << ms->toJSON() << " L: " << __LINE__ << ":" << __FILE__ << "\n";
ms->Flip_endian();
sig_SEND((uint8_t*)ms, sizeof(UPDATE_LDB_DATA));
}
void HOST_logIN::SEND_MS_DOWNLOAD_INDEX()
{
BOOST_LOG_TRIVIAL(info) << "SEND_MS_DOWNLOAD_INDEXL: " << __LINE__ << ":" << __FILE__ "\n";
uint8_t data[sizeof(MS_UPDATE_LOCAL_DATABASE)] = {  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,00,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,};
MS_DOWNLOAD_INDEX* ms = new MS_DOWNLOAD_INDEX(data);
ms->Direct_Interface_Header.Length = sizeof(MS_DOWNLOAD_INDEX);
ms->Message_Header.TransactionCode = NNF_Constants::TransactionCode::BCAST_INDEX_MSTR_CHG ;
ms->Message_Header.MessageLength = (sizeof(MS_DOWNLOAD_INDEX) - sizeof(DIRECT_INTERFACE_HEADER));BOOST_LOG_TRIVIAL(info) << ms->toJSON() << " L: " << __LINE__ << ":" << __FILE__ << "\n";
ms->Flip_endian();
sig_SEND((uint8_t*)ms, sizeof(MS_DOWNLOAD_INDEX));
}
void HOST_logIN::SEND_MS_DOWNLOAD_INDEX_MAP()
{
BOOST_LOG_TRIVIAL(info) << "SEND_MS_DOWNLOAD_INDEX_MAPL: " << __LINE__ << ":" << __FILE__ "\n";
uint8_t data[sizeof(MS_UPDATE_LOCAL_DATABASE)] = {  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,00,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,};
MS_DOWNLOAD_INDEX_MAP* ms = new MS_DOWNLOAD_INDEX_MAP(data);
ms->Direct_Interface_Header.Length = sizeof(MS_DOWNLOAD_INDEX_MAP);
ms->Message_Header.TransactionCode = NNF_Constants::TransactionCode::BCAST_INDEX_MAP_TABLE ;
ms->Message_Header.MessageLength = (sizeof(MS_DOWNLOAD_INDEX_MAP) - sizeof(DIRECT_INTERFACE_HEADER));BOOST_LOG_TRIVIAL(info) << ms->toJSON() << " L: " << __LINE__ << ":" << __FILE__ << "\n";
ms->Flip_endian();
sig_SEND((uint8_t*)ms, sizeof(MS_DOWNLOAD_INDEX_MAP));
}
void HOST_logIN::SEND_UPDATE_LOCAL_DB_TRAILER()
{
BOOST_LOG_TRIVIAL(info) << "SEND_UPDATE_LOCAL_DB_TRAILERL: " << __LINE__ << ":" << __FILE__ "\n";
uint8_t data[sizeof(MS_UPDATE_LOCAL_DATABASE)] = {  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,00,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,};
UPDATE_LOCAL_DB_TRAILER* ms = new UPDATE_LOCAL_DB_TRAILER(data);
ms->Direct_Interface_Header.Length = sizeof(UPDATE_LOCAL_DB_TRAILER);
ms->Message_Header.TransactionCode = NNF_Constants::TransactionCode::UPDATE_LOCALDB_TRAILER;
ms->Message_Header.MessageLength = (sizeof(UPDATE_LOCAL_DB_TRAILER) - sizeof(DIRECT_INTERFACE_HEADER));BOOST_LOG_TRIVIAL(info) << ms->toJSON() << " L: " << __LINE__ << ":" << __FILE__ << "\n";
ms->Flip_endian();
sig_SEND((uint8_t*)ms, sizeof(UPDATE_LOCAL_DB_TRAILER));
}
void HOST_logIN::RECEIVE_EXCH_PORTFOLIO_REQ(EXCH_PORTFOLIO_REQ* ms)
{
BOOST_LOG_TRIVIAL(info) << "RECEIVE_EXCH_PORTFOLIO_REQL: " << __LINE__ << ":" << __FILE__ "\n";
BOOST_LOG_TRIVIAL(info) << ms->toJSON() << "L: " << __LINE__ << ":" << __FILE__ "\n";
delete  ms;
}
void HOST_logIN::SEND_EXCH_PORTFOLIO_RESP()
{
BOOST_LOG_TRIVIAL(info) << "SEND_EXCH_PORTFOLIO_RESPL: " << __LINE__ << ":" << __FILE__ "\n";
uint8_t data[sizeof(MS_UPDATE_LOCAL_DATABASE)] = {  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,00,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,3,2,1,};
EXCH_PORTFOLIO_RESP* ms = new EXCH_PORTFOLIO_RESP(data);
ms->Direct_Interface_Header.Length = sizeof(EXCH_PORTFOLIO_RESP);
ms->Message_Header.TransactionCode = NNF_Constants::TransactionCode::EXCH_PORTF_OUT;
ms->Message_Header.MessageLength = (sizeof(EXCH_PORTFOLIO_RESP) - sizeof(DIRECT_INTERFACE_HEADER));BOOST_LOG_TRIVIAL(info) << ms->toJSON() << " L: " << __LINE__ << ":" << __FILE__ << "\n";
ms->Flip_endian();
sig_SEND((uint8_t*)ms, sizeof(EXCH_PORTFOLIO_RESP));
}
void HOST_logIN::RECEIVE_MS_MESSAGE_DOWNLOAD(MS_MESSAGE_DOWNLOAD* ms)
{
BOOST_LOG_TRIVIAL(info) << "RECEIVE_MS_MESSAGE_DOWNLOADL: " << __LINE__ << ":" << __FILE__ "\n";
BOOST_LOG_TRIVIAL(info) << ms->toJSON() << "L: " << __LINE__ << ":" << __FILE__ "\n";
delete  ms;
}
void HOST_logIN::SEND_MS_MESSAGE_DOWNLOAD_HEADER()
{
BOOST_LOG_TRIVIAL(info) << "SEND_MS_MESSAGE_DOWNLOAD_HEADERL: " << __LINE__ << ":" << __FILE__ "\n";
uint8_t data[sizeof(MS_UPDATE_LOCAL_DATABASE)] = {  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,00,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,};
MS_MESSAGE_DOWNLOAD_HEADER* ms = new MS_MESSAGE_DOWNLOAD_HEADER(data);
ms->Direct_Interface_Header.Length = sizeof(MS_MESSAGE_DOWNLOAD_HEADER);
ms->Message_Header.TransactionCode = NNF_Constants::TransactionCode::HEADER_RECORD;
ms->Message_Header.MessageLength = (sizeof(MS_MESSAGE_DOWNLOAD_HEADER) - sizeof(DIRECT_INTERFACE_HEADER));BOOST_LOG_TRIVIAL(info) << ms->toJSON() << " L: " << __LINE__ << ":" << __FILE__ << "\n";
ms->Flip_endian();
sig_SEND((uint8_t*)ms, sizeof(MS_MESSAGE_DOWNLOAD_HEADER));
}
void HOST_logIN::SEND_MS_MESSAGE_DOWNLOAD_DATA()
{
BOOST_LOG_TRIVIAL(info) << "SEND_MS_MESSAGE_DOWNLOAD_DATAL: " << __LINE__ << ":" << __FILE__ "\n";
uint8_t data[sizeof(MS_UPDATE_LOCAL_DATABASE)] = {  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,00,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,};
MS_MESSAGE_DOWNLOAD_DATA* ms = new MS_MESSAGE_DOWNLOAD_DATA(data);
ms->Direct_Interface_Header.Length = sizeof(MS_MESSAGE_DOWNLOAD_DATA);
ms->Message_Header.TransactionCode = NNF_Constants::TransactionCode::MESSAGE_RECORD;
ms->Message_Header.MessageLength = (sizeof(MS_MESSAGE_DOWNLOAD_DATA) - sizeof(DIRECT_INTERFACE_HEADER));BOOST_LOG_TRIVIAL(info) << ms->toJSON() << " L: " << __LINE__ << ":" << __FILE__ << "\n";
ms->Flip_endian();
sig_SEND((uint8_t*)ms, sizeof(MS_MESSAGE_DOWNLOAD_DATA));
}
void HOST_logIN::SEND_MS_MESSAGE_DOWNLOAD_TRAILER()
{
BOOST_LOG_TRIVIAL(info) << "SEND_MS_MESSAGE_DOWNLOAD_TRAILERL: " << __LINE__ << ":" << __FILE__ "\n";
uint8_t data[sizeof(MS_UPDATE_LOCAL_DATABASE)] = {  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,00,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,};
MS_MESSAGE_DOWNLOAD_TRAILER* ms = new MS_MESSAGE_DOWNLOAD_TRAILER(data);
ms->Direct_Interface_Header.Length = sizeof(MS_MESSAGE_DOWNLOAD_TRAILER);
ms->Message_Header.TransactionCode = NNF_Constants::TransactionCode::TRAILER_RECORD;
ms->Message_Header.MessageLength = (sizeof(MS_MESSAGE_DOWNLOAD_TRAILER) - sizeof(DIRECT_INTERFACE_HEADER));BOOST_LOG_TRIVIAL(info) << ms->toJSON() << " L: " << __LINE__ << ":" << __FILE__ << "\n";
ms->Flip_endian();
sig_SEND((uint8_t*)ms, sizeof(MS_MESSAGE_DOWNLOAD_TRAILER));
}
void HOST_logIN::SEND_MS_SIGNOFF()
{
BOOST_LOG_TRIVIAL(info) << "SEND_MS_SIGNOFFL: " << __LINE__ << ":" << __FILE__ "\n";
uint8_t data[sizeof(MS_UPDATE_LOCAL_DATABASE)] = {  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,00,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,};
MS_SIGNOFF* ms = new MS_SIGNOFF(data);
ms->Direct_Interface_Header.Length = sizeof(MS_SIGNOFF);
ms->Message_Header.TransactionCode = NNF_Constants::TransactionCode::SIGN_OFF_REQUEST_IN;
ms->Message_Header.MessageLength = (sizeof(MS_SIGNOFF) - sizeof(DIRECT_INTERFACE_HEADER));BOOST_LOG_TRIVIAL(info) << ms->toJSON() << " L: " << __LINE__ << ":" << __FILE__ << "\n";
ms->Flip_endian();
sig_SEND((uint8_t*)ms, sizeof(MS_SIGNOFF));
}
void HOST_logIN::RECEIVE_MS_SIGNOFF(MS_SIGNOFF* ms)
{
BOOST_LOG_TRIVIAL(info) << "RECEIVE_MS_SIGNOFFL: " << __LINE__ << ":" << __FILE__ "\n";
BOOST_LOG_TRIVIAL(info) << ms->toJSON() << "L: " << __LINE__ << ":" << __FILE__ "\n";
delete  ms;
}
void HOST_logIN::RECEIVE_HEARTBEAT(HEARTBEAT* ms)
{
BOOST_LOG_TRIVIAL(info) << "RECEIVE_HEARTBEATL: " << __LINE__ << ":" << __FILE__ "\n";
BOOST_LOG_TRIVIAL(info) << ms->toJSON() << "L: " << __LINE__ << ":" << __FILE__ "\n";
delete  ms;
}
